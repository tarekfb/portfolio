'use client'

import { createContext, useCallback, useMemo, useState } from 'react'
import * as blobs2 from "blobs/v2";

const config = {
    extraPoints: 8,
    randomness: 4,
    size: 256,
}

const generateRandomBlobPath = () => blobs2.svgPath({
    ...config,
    seed: Math.random(),
});

const initBlob = {
    blobPathData: "M128,223.95242444958006C150.32707696848163,227.3816662936399,175.3484294332275,243.44451992242782,194.04363402335173,230.76590048200956C212.84442602612395,218.01567430328527,203.772879941231,187.56502445475442,212.55003631203545,166.61270779089654C220.91881285240453,146.63525168152023,246.57618442856923,132.8252785829958,244.08525336717273,111.30946031289369C241.60264797232796,89.86555632869086,216.2202813723512,80.02206941291907,200.77880554749606,64.93680600850224C186.7906856374184,51.27137170872937,175.13889875200113,35.72112753033988,157.68496326588792,26.90229941846937C137.61156479203004,16.75995353304537,115.15147117372081,4.413830084294355,93.57895491225071,10.77268599542056C72.00820075329244,17.13102249769164,62.36406304999143,41.40466090654461,48.47719315507712,59.093095619205044C35.31198950417115,75.86230617710129,20.17130581449144,91.14698606193033,14.37198573670399,111.66275795918679C8.05554211224924,134.00791478154193,2.5134095351261934,159.92125111800118,14.323972208016983,179.91410241105785C26.046482375337764,199.7578989385966,52.33171057062566,203.97530610313981,73.82299105638705,212.3010714332239C91.40360130913369,219.11183524141182,109.36476119636195,221.09021634371402,128,223.95242444958006",
    setRandomBlob: () => {
        console.warn('setRandomBlob was called without a provider - doing nothing.');
    },
};

export const BlobContext = createContext(initBlob)

export default function BlobProvider({
    children,
}: {
    children: React.ReactNode
}) {
    const [blobPathData, setBlobPathData] = useState(initBlob.blobPathData);
    const setRandomBlob = useCallback(() => {
        const newShape = generateRandomBlobPath();
        setBlobPathData(newShape);
    }, []);

    const contextValue = useMemo(() => ({
        blobPathData,
        setRandomBlob,
    }), [blobPathData, setRandomBlob]);

    return <BlobContext.Provider value={contextValue}>{children}</BlobContext.Provider>
}
