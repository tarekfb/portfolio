'use client'

import { createContext, useCallback, useMemo, useState } from 'react'

const dividerDataPaths = [
    "M0,256L80,245.3C160,235,320,213,480,170.7C640,128,800,64,960,53.3C1120,43,1280,85,1360,106.7L1440,128L1440,320L1360,320C1280,320,1120,320,960,320C800,320,640,320,480,320C320,320,160,320,80,320L0,320Z",
    "M0,96L48,122.7C96,149,192,203,288,192C384,181,480,107,576,85.3C672,64,768,96,864,122.7C960,149,1056,171,1152,176C1248,181,1344,171,1392,165.3L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z",
    "M0,96L48,133.3C96,171,192,245,288,256C384,267,480,213,576,186.7C672,160,768,160,864,170.7C960,181,1056,203,1152,218.7C1248,235,1344,245,1392,250.7L1440,256L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z",
    "M0,160L48,165.3C96,171,192,181,288,192C384,203,480,213,576,202.7C672,192,768,160,864,176C960,192,1056,256,1152,272C1248,288,1344,256,1392,240L1440,224L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z",
    "M0,256L48,218.7C96,181,192,107,288,85.3C384,64,480,96,576,112C672,128,768,128,864,144C960,160,1056,192,1152,213.3C1248,235,1344,245,1392,250.7L1440,256L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z",
    "M0,32L48,74.7C96,117,192,203,288,218.7C384,235,480,181,576,138.7C672,96,768,64,864,74.7C960,85,1056,139,1152,165.3C1248,192,1344,192,1392,192L1440,192L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z",
    "M0,128L48,117.3C96,107,192,85,288,96C384,107,480,149,576,138.7C672,128,768,64,864,48C960,32,1056,64,1152,85.3C1248,107,1344,117,1392,122.7L1440,128L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z",
    "M0,224L48,218.7C96,213,192,203,288,186.7C384,171,480,149,576,149.3C672,149,768,171,864,170.7C960,171,1056,149,1152,154.7C1248,160,1344,192,1392,208L1440,224L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z",
    "M0,224L48,234.7C96,245,192,267,288,240C384,213,480,139,576,117.3C672,96,768,128,864,154.7C960,181,1056,203,1152,224C1248,245,1344,267,1392,277.3L1440,288L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z",
    "M0,288L48,250.7C96,213,192,139,288,133.3C384,128,480,192,576,186.7C672,181,768,107,864,96C960,85,1056,139,1152,186.7C1248,235,1344,277,1392,298.7L1440,320L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z",
    "M0,128L48,149.3C96,171,192,213,288,213.3C384,213,480,171,576,160C672,149,768,171,864,192C960,213,1056,235,1152,218.7C1248,203,1344,149,1392,122.7L1440,96L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z",
    "M0,192L48,160C96,128,192,64,288,64C384,64,480,128,576,154.7C672,181,768,171,864,154.7C960,139,1056,117,1152,96C1248,75,1344,53,1392,42.7L1440,32L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z",
    "M0,160L48,165.3C96,171,192,181,288,154.7C384,128,480,64,576,74.7C672,85,768,171,864,202.7C960,235,1056,213,1152,197.3C1248,181,1344,171,1392,165.3L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z",
    "M0,64L48,106.7C96,149,192,235,288,261.3C384,288,480,256,576,234.7C672,213,768,203,864,213.3C960,224,1056,256,1152,250.7C1248,245,1344,203,1392,181.3L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z",
]

const generateRandomDividerPath = (current: string[]) => {
    let newPath = '';
    do {
        newPath = dividerDataPaths[Math.floor(Math.random() * dividerDataPaths.length)];
        console.log({newPath, current})
    } while (!current.some(c => c === newPath))
    return newPath;
};

const initDivider = {
    dividerPathData: dividerDataPaths[0],
    dividerPathData2: dividerDataPaths[1],
    dividerPathData3: dividerDataPaths[3],
    setRandomDivider: () => {
        console.warn('setRandomDivider was called without a provider - doing nothing.');
    },
};

export const DividerContext = createContext(initDivider)

export default function DividerProvider({
    children,
}: {
    children: React.ReactNode
}) {
    const [dividerPathData, setDividerPathData] = useState(initDivider.dividerPathData);
    const [dividerPathData2, setDividerPathData2] = useState(initDivider.dividerPathData2);
    const [dividerPathData3, setDividerPathData3] = useState(initDivider.dividerPathData3);
    const setRandomDivider = useCallback(() => {
        const firstDivider = generateRandomDividerPath(dividerPathData);
        let secondDivider = ''
        do {
            secondDivider = generateRandomDividerPath(dividerPathData2);
        } while (secondDivider === firstDivider);

        setDividerPathData(firstDivider);
        setDividerPathData2(secondDivider);
    }, [dividerPathData, dividerPathData2]);

    const contextValue = useMemo(() => ({
        dividerPathData,
        dividerPathData2,
        dividerPathData3,
        setRandomDivider,
    }), [dividerPathData, setRandomDivider]);

    return <DividerContext.Provider value={contextValue}>{children}</DividerContext.Provider>
}
